# Soyspray Project Structure

## Overview
This is a home Kubernetes cluster project that integrates Kubespray with custom ArgoCD applications. The project follows GitOps principles and uses Ansible for cluster management.

## Project Structure
```
soyspray/
â”œâ”€â”€ kubespray/                    # Kubespray submodule for K8s cluster
â”œâ”€â”€ playbooks/                    # Custom Ansible playbooks
â”‚   â”œâ”€â”€ deploy-argocd-apps.yml    # Main ArgoCD deployment playbook
â”‚   â”œâ”€â”€ argocd/                   # ArgoCD manifests (config + apps)
â”‚   â””â”€â”€ helm/                     # Helm bootstrap manifests
â”œâ”€â”€ scripts/                      # Utility scripts
â”œâ”€â”€ soydocs/                      # Project documentation
â””â”€â”€ main.yml                      # Main Ansible playbook
```

## Kubespray Integration
The project uses Kubespray as a Git submodule ([.gitmodules](mdc:.gitmodules)) to manage the underlying Kubernetes cluster:

- **Kubespray**: Provides the core K8s cluster deployment
- **Custom Playbooks**: Extend Kubespray with additional functionality
- **Integration**: Follows [kubespray/docs/operations/integration.md](mdc:kubespray/docs/operations/integration.md)

## Key Components

### Cluster Management
- **Main Playbook**: [main.yml](mdc:main.yml) - Primary cluster orchestration
- **Kubespray Config**: [kubespray/inventory/soycluster/](mdc:kubespray/inventory/soycluster) - Cluster configuration
- **Addons**: [kubespray/inventory/soycluster/group_vars/k8s_cluster/addons.yml](mdc:kubespray/inventory/soycluster/group_vars/k8s_cluster/addons.yml)

### Application Management
- **ArgoCD Apps**: [playbooks/deploy-argocd-apps.yml](mdc:playbooks/deploy-argocd-apps.yml) - Deploys all applications
- **App Definitions**: [playbooks/argocd/apps/](mdc:playbooks/argocd/apps) - Individual application configs
- **GitOps**: All applications managed through ArgoCD

### Documentation
- **Project Docs**: [soydocs/](mdc:soydocs) - Project-specific documentation
- **ArgoCD Guide**: [soydocs/argocd.md](mdc:soydocs/argocd.md) - ArgoCD setup and usage
- **README**: [README.md](mdc:README.md) - Main project documentation

## Deployment Workflow

### Initial Cluster Setup
1. **Kubespray**: Deploy base Kubernetes cluster
2. **ArgoCD**: Install ArgoCD as cluster addon
3. **Applications**: Deploy applications via ArgoCD

### Application Updates
1. **Code Changes**: Modify application configurations
2. **Git Commit**: Version control all changes
3. **ArgoCD Login**: `make argo` to authenticate
4. **ArgoCD Sync**: `argocd app sync <application-name>` to deploy changes
5. **Verification**: Monitor application health

### Cluster Upgrades
- Use [kubespray/upgrade-cluster.yml](mdc:kubespray/upgrade-cluster.yml) as per [README.md](mdc:README.md)
- Follow GitOps principles for all changes
- Custom playbooks handle additional configuration

## Key Principles

### GitOps Approach
- All cluster state defined in Git
- No manual cluster modifications
- Automated deployment through ArgoCD
- Version-controlled infrastructure

### Ansible Automation
- Repeatable deployments via playbooks
- Custom runbooks for common tasks
- Integration with Kubespray workflows
- Example: [playbooks/initialize-longhorn-storage.yml](mdc:playbooks/initialize-longhorn-storage.yml)
- **IMPORTANT**: Always activate the Python virtual environment before running Ansible commands:
  ```bash
  source soyspray-venv/bin/activate
  ```

### One-off Operations
- Shell scripts for troubleshooting
- kubectl commands for debugging
- Temporary operations outside GitOps

## Common Operations

### Cluster Management
```bash
# IMPORTANT: Activate virtual environment first for all Ansible commands
source soyspray-venv/bin/activate

# Deploy cluster
ansible-playbook -i kubespray/inventory/soycluster/hosts.yml --become --become-user=root --user ubuntu main.yml

# Upgrade cluster
ansible-playbook -i kubespray/inventory/soycluster/hosts.yml --become --become-user=root --user ubuntu kubespray/upgrade-cluster.yml

# Deploy all applications
ansible-playbook -i kubespray/inventory/soycluster/hosts.yml --become --become-user=root --user ubuntu playbooks/deploy-argocd-apps.yml

# Deploy specific application (use --tags)
ansible-playbook -i kubespray/inventory/soycluster/hosts.yml --become --become-user=root --user ubuntu playbooks/deploy-argocd-apps.yml --tags radarr
```

### ArgoCD Management
```bash
# Login to ArgoCD
make argo

# Manual login (equivalent to make argo)
argocd login argocd.soyspray.vip --username admin --password password --grpc-web

# Sync specific application
argocd app sync lazylibrarian
argocd app sync qbittorrent
argocd app sync prowlarr

# Check application status
argocd app get <application-name>

# List all applications
argocd app list
```

### ðŸš¨ CRITICAL: ArgoCD targetRevision Management
**ALWAYS CHECK AND UPDATE targetRevision WHEN WORKING ON BRANCHES**

When working on a feature branch (like `cinema`), you **MUST** update the ArgoCD application's `targetRevision` field:

```yaml
# In *-application.yaml files
spec:
  source:
    repoURL: "https://github.com/kpoxo6op/soyspray.git"
    targetRevision: "cinema"  # NOT v1.17.0 when working on cinema branch!
    path: playbooks/argocd/apps/app-name
```

**Current Branch Mapping:**
- **Media Stack Apps** (Radarr, Sonarr, Prowlarr, Pi-hole): Use `"cinema"` branch
- **Infrastructure Apps** (cert-manager, longhorn, etc.): Use `"v1.17.0"` tag
- **LazyLibrarian**: Uses `"lazylibrarian"` branch

**Why This Matters:**
- If targetRevision points to wrong branch/tag, your changes won't deploy
- ArgoCD will sync old version without your modifications
- Leads to confusing debugging sessions when features don't work
- Bootstrap jobs may not include new payload files or configurations

**Checklist Before Any ArgoCD Application Changes:**
1. âœ… Check current git branch: `git branch --show-current`
2. âœ… Verify targetRevision matches your working branch
3. âœ… Update targetRevision if needed
4. âœ… Commit application.yaml changes first
5. âœ… Then sync the application: `argocd app sync <app-name>`

### Application Management
```bash
# Check ArgoCD applications
kubectl get applications -n argocd

# Check pod status
kubectl get pods -n media

# Check application logs
kubectl logs -f deployment/<app-name> -n <namespace>
```

## Best Practices
- **ðŸš¨ CRITICAL**: Always verify ArgoCD targetRevision matches your git branch before making changes
- **Always use GitOps**: Avoid manual cluster changes
- **Test Changes**: Validate in development before production
- **Document Everything**: Keep documentation updated
- **Monitor Health**: Watch application and cluster status
- **Backup Regularly**: Ensure cluster state is recoverable
