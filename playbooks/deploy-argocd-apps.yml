# playbooks/manage-argocd-apps.yml
---
- name: Apply Argo CD Applications - Deploy Application Manifests
  hosts: kube_control_plane[0]
  become: true
  vars:
    kubeconfig_path: /etc/kubernetes/admin.conf
  tasks:
    - name: Apply Pihole
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
        namespace: argocd
        definition: "{{ lookup('file', playbook_dir + '/yaml/argocd-apps/pihole/pihole-application.yaml') }}"
      tags: pihole

    - name: Apply Pihole Exporter
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
        namespace: argocd
        definition: "{{ lookup('file', playbook_dir + '/yaml/argocd-apps/pihole-exporter/pihole-exporter-application.yaml') }}"
      tags: pihole

    - name: Verify and load Telegram token from .env
      block:

        - name: Load TELEGRAM_BOT_TOKEN from .env
          set_fact:
            telegram_bot_token: >-
              {{
                lookup('file', playbook_dir + '/../.env')
                | regex_findall('TELEGRAM_BOT_TOKEN=([^\n]+)')
                | first
                | default('')
                | trim
              }}

        - name: Debug token length
          debug:
            msg: >-
              Token length: {{ telegram_bot_token | length }}
              First chars: {{ telegram_bot_token | truncate(5, True, '') }}

        - name: Validate TELEGRAM_BOT_TOKEN
          fail:
            msg: "TELEGRAM_BOT_TOKEN is empty/missing in .env file"
          when: telegram_bot_token | length == 0
      rescue:
        - name: Fail with helpful message
          fail:
            msg: "Error: .env file not found or TELEGRAM_BOT_TOKEN invalid"
      tags: prometheus

    - name: Create monitoring namespace
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: monitoring
      tags: prometheus

    - name: Create Kubernetes Secret for Alertmanager Telegram Integration
      kubernetes.core.k8s:
        state: present
        namespace: monitoring
        resource_definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: alertmanager-telegram-secret
            namespace: monitoring
          data:
            TELEGRAM_BOT_TOKEN: "{{ telegram_bot_token | b64encode }}"
      tags: prometheus

    - name: Apply Prometheus CRDs
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
        namespace: argocd
        definition: "{{ lookup('file', playbook_dir + '/yaml/argocd-apps/prometheus/prometheus-crds-application.yaml') }}"
      tags:
        - prometheus
        - prometheus-crds

    - name: Apply Prometheus
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
        namespace: argocd
        definition: "{{ lookup('file', playbook_dir + '/yaml/argocd-apps/prometheus/prometheus-application.yaml') }}"
      tags: prometheus

    - name: Apply Longhorn
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
        namespace: argocd
        definition: "{{ lookup('file', playbook_dir + '/yaml/argocd-apps/longhorn/longhorn-application.yaml') }}"
      tags: longhorn

    # Verify and load Cloudflare token for cert-manager
    - name: Verify and load Cloudflare token from .env for cert-manager
      block:
        - name: Load CLOUDFLARE_API_TOKEN from .env
          set_fact:
            cloudflare_api_token: >-
              {{
                lookup('file', playbook_dir + '/../.env')
                | regex_findall('CLOUDFLARE_API_TOKEN=([^\n]+)') | first
                | default('') | trim
              }}

        - name: Debug token length
          debug:
            msg: >-
              Token length: {{ cloudflare_api_token | length }}
              First chars: {{ cloudflare_api_token | truncate(5, True, '') }}

        - name: Validate CLOUDFLARE_API_TOKEN
          fail:
            msg: "CLOUDFLARE_API_TOKEN is empty/missing in .env file"
          when: cloudflare_api_token | length == 0
      rescue:
        - name: Fail with helpful message
          fail:
            msg: "Error: .env file not found or CLOUDFLARE_API_TOKEN invalid"
      tags: cert-manager

    - name: Create Cloudflare API Token Secret
      kubernetes.core.k8s:
        state: present
        namespace: cert-manager
        resource_definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: cloudflare-api-token
            namespace: cert-manager
          data:
            api-token: "{{ cloudflare_api_token | b64encode }}"
      tags: cert-manager

    - name: Apply Cert Manager Configuration
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
        namespace: argocd
        definition: "{{ lookup('file', playbook_dir + '/yaml/argocd-apps/cert-manager/cert-manager-application.yaml') }}"
      tags: cert-manager

    # Create namespace for external-dns
    - name: Create external-dns namespace
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: external-dns
      tags: external-dns

    # Verify and load Cloudflare token for external-dns
    - name: Verify and load Cloudflare token from .env for external-dns
      block:
        - name: Load CLOUDFLARE_API_TOKEN from .env
          set_fact:
            cloudflare_api_token: >-
              {{
                lookup('file', playbook_dir + '/../.env')
                | regex_findall('CLOUDFLARE_API_TOKEN=([^\n]+)') | first
                | default('') | trim
              }}

        - name: Debug token length
          debug:
            msg: >-
              Token length: {{ cloudflare_api_token | length }}
              First chars: {{ cloudflare_api_token | truncate(5, True, '') }}

        - name: Validate CLOUDFLARE_API_TOKEN
          fail:
            msg: "CLOUDFLARE_API_TOKEN is empty/missing in .env file"
          when: cloudflare_api_token | length == 0
      rescue:
        - name: Fail with helpful message
          fail:
            msg: "Error: .env file not found or CLOUDFLARE_API_TOKEN invalid"
      tags: external-dns

    # Create secret for external-dns using the same Cloudflare token
    - name: Create External DNS Cloudflare API Token Secret
      kubernetes.core.k8s:
        state: present
        namespace: external-dns
        resource_definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: cloudflare-api-token
            namespace: external-dns
          data:
            api-token: "{{ cloudflare_api_token | b64encode }}"
      tags: external-dns

    - name: Apply External DNS
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
        namespace: argocd
        definition: "{{ lookup('file', playbook_dir + '/yaml/argocd-apps/external-dns/external-dns-application.yaml') }}"
      tags: external-dns

    - name: Apply PostgreSQL
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
        namespace: argocd
        definition: "{{ lookup('file', playbook_dir + '/yaml/argocd-apps/postgresql/postgresql-application.yaml') }}"
      tags: postgresql

    - name: Apply Redis
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
        namespace: argocd
        definition: "{{ lookup('file', playbook_dir + '/yaml/argocd-apps/redis/redis-application.yaml') }}"
      tags: redis

    - name: Apply Immich
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
        namespace: argocd
        definition: "{{ lookup('file', playbook_dir + '/yaml/argocd-apps/immich/immich-application.yaml') }}"
      tags: immich

    - name: Apply qbittorrent
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
        namespace: argocd
        definition: "{{ lookup('file', playbook_dir + '/yaml/argocd-apps/qbittorrent/qbittorrent-application.yaml') }}"
      tags: qbittorrent

    - name: Apply Radarr
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
        namespace: argocd
        definition: "{{ lookup('file', playbook_dir + '/yaml/argocd-apps/radarr/radarr-application.yaml') }}"
      tags: radarr

    - name: Apply Readarr
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
        namespace: argocd
        definition: "{{ lookup('file', playbook_dir + '/yaml/argocd-apps/readarr/readarr-application.yaml') }}"
      tags: readarr

    - name: Apply Calibre Web
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
        namespace: argocd
        definition: "{{ lookup('file', playbook_dir + '/yaml/argocd-apps/calibre-web/calibre-web-application.yaml') }}"
      tags: calibre-web

    # Verify and load Prowlarr secrets from .env
    - name: Verify and load Prowlarr secrets from .env
      block:
        - name: Load PROWLARR_API_KEY from .env
          set_fact:
            prowlarr_api_key: >-
              {{
                lookup('file', playbook_dir + '/../.env')
                | regex_findall('PROWLARR_API_KEY=([^\n]+)')
                | first
                | default('')
                | trim
              }}

        - name: Load RUTRACKER_USER from .env
          set_fact:
            rutracker_user: >-
              {{
                lookup('file', playbook_dir + '/../.env')
                | regex_findall('RUTRACKER_USER=([^\n]+)')
                | first
                | default('')
                | trim
              }}

        - name: Load RUTRACKER_PASS from .env
          set_fact:
            rutracker_pass: >-
              {{
                lookup('file', playbook_dir + '/../.env')
                | regex_findall('RUTRACKER_PASS=([^\n]+)')
                | first
                | default('')
                | trim
              }}

        - name: Validate Prowlarr secrets
          fail:
            msg: "{{ item.name }} is empty/missing in .env file"
          when: item.value | length == 0
          loop:
            - { name: "PROWLARR_API_KEY", value: "{{ prowlarr_api_key }}" }
            - { name: "RUTRACKER_USER", value: "{{ rutracker_user }}" }
            - { name: "RUTRACKER_PASS", value: "{{ rutracker_pass }}" }
      rescue:
        - name: Fail with helpful message
          fail:
            msg: "Error: .env file not found or Prowlarr secrets invalid"
      tags: prowlarr

    # Create namespace for Prowlarr
    - name: Create media namespace
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: media
      tags: prowlarr

    # Create Prowlarr secrets
    - name: Create Prowlarr secrets
      kubernetes.core.k8s:
        state: present
        namespace: media
        kubeconfig: "{{ kubeconfig_path }}"
        resource_definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: prowlarr-secrets
            namespace: media
          data:
            PROWLARR_API_KEY: "{{ prowlarr_api_key | b64encode }}"
            RUTRACKER_USER: "{{ rutracker_user | b64encode }}"
            RUTRACKER_PASS: "{{ rutracker_pass | b64encode }}"
      tags: prowlarr

    - name: Apply Prowlarr
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
        namespace: argocd
        definition: "{{ lookup('file', playbook_dir + '/yaml/argocd-apps/prowlarr/prowlarr-application.yaml') }}"
      tags: prowlarr
