---
# Playbook to deploy a simple Flask application to test WireGuard connectivity
# This deploys a test Flask server on Node-A that can be accessed through the WireGuard tunnel

- name: Common tasks for every playbook
  import_playbook: ../kubespray/playbooks/boilerplate.yml

- name: Deploy Flask test application
  hosts: kube_control_plane[0]
  become: true
  vars:
    app_dir: /home/ubuntu/flask_test
    service_name: wireguard-test

  tasks:
    - name: Install Python3 and pip
      ansible.builtin.apt:
        name:
          - python3
          - python3-pip
          - python3-venv
        state: present
        update_cache: yes

    - name: Create app directory
      ansible.builtin.file:
        path: "{{ app_dir }}"
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: "0755"

    - name: Copy Flask application files
      ansible.builtin.copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: ubuntu
        group: ubuntu
        mode: "0644"
      with_items:
        - { src: "{{ playbook_dir }}/../flask_test/app.py", dest: "{{ app_dir }}/app.py" }
        - { src: "{{ playbook_dir }}/../flask_test/requirements.txt", dest: "{{ app_dir }}/requirements.txt" }

    - name: Make app.py executable
      ansible.builtin.file:
        path: "{{ app_dir }}/app.py"
        mode: "0755"

    - name: Create Python virtual environment
      ansible.builtin.command: python3 -m venv venv
      args:
        chdir: "{{ app_dir }}"
        creates: "{{ app_dir }}/venv"
      become_user: ubuntu

    - name: Install requirements
      ansible.builtin.pip:
        requirements: "{{ app_dir }}/requirements.txt"
        virtualenv: "{{ app_dir }}/venv"
      become_user: ubuntu

    - name: Copy systemd service file
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/../flask_test/wireguard-test.service"
        dest: "/etc/systemd/system/{{ service_name }}.service"
        owner: root
        group: root
        mode: "0644"

    - name: Enable and start the service
      ansible.builtin.systemd:
        name: "{{ service_name }}"
        state: started
        enabled: yes
        daemon_reload: yes

    - name: Check if UFW is active
      ansible.builtin.command: ufw status
      register: ufw_status
      changed_when: false
      ignore_errors: true

    - name: Open port 5000 in UFW (if active)
      ansible.builtin.command: ufw allow 5000/tcp
      when: ufw_status.stdout is defined and "active" in ufw_status.stdout
      ignore_errors: true

    - name: Get Node-A IP addresses
      ansible.builtin.shell: ip -br addr | grep -E 'eno1|wg0-home' | awk '{print $1, $3}'
      register: ip_addresses
      changed_when: false

    - name: Display access information
      ansible.builtin.debug:
        msg:
          - "Flask test server deployed successfully!"
          - "Access via LAN: http://{{ ansible_host }}:5000"
          - "Available network interfaces: {{ ip_addresses.stdout_lines }}"
          - "To access from your mobile phone through WireGuard:"
          - "1. Connect to your VPS WireGuard server from your phone"
          - "2. Access http://192.168.50.103:5000 in your mobile browser"
