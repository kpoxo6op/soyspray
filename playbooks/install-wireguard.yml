---
# This playbook implements the hub-and-spoke Wireguard model with Azure VPS as intermediary:
# 1. Azure VPS acts as a WireGuard "hub" with public IP
# 2. Home Cluster Node-A establishes outbound tunnel to VPS and routes for 192.168.50.0/24
# 3. This allows remote access to K8s cluster without opening ports on home router
# 4. Connections follow: Mobile → VPS → Home Node → K8s Services

- name: Common tasks for every playbook
  import_playbook: ../kubespray/playbooks/boilerplate.yml

- name: Install and configure WireGuard on Home Node-A
  hosts: kube_control_plane[0]
  become: true
  vars:
    wireguard_home_ip: 10.8.0.3
    wireguard_home_subnet: 24
    wireguard_vps_ip: 10.8.0.1
    wireguard_vps_port: 51820
    wireguard_conf_dir: /etc/wireguard
    wireguard_interface: wg0-home
    wireguard_network_cidr: 192.168.50.0/24
    wireguard_allowed_ips: "10.8.0.0/24"
    wireguard_keepalive_seconds: 25
    local_keys_dir: "{{ playbook_dir }}/../wireguard_keys"
    server_public_key_file: "{{ playbook_dir }}/../wireguard_keys/server_public.key"

  tasks:
    - name: Verify VPS public IP is provided
      ansible.builtin.fail:
        msg: "ERROR: VPS public IP is required. Run the playbook with -e 'vps_public_ip=YOUR_VPS_IP_HERE'"
      when: vps_public_ip is not defined or vps_public_ip == ""

    - name: Set VPS public IP from parameter
      ansible.builtin.set_fact:
        wireguard_vps_public_ip: "{{ vps_public_ip }}"

    - name: Verify environment is ready for WireGuard
      ansible.builtin.assert:
        that:
          - ansible_os_family == "Debian"
          - ansible_kernel is version('5.6', '>=') or (ansible_distribution_version is version('20.04', '>=') and ansible_distribution == "Ubuntu")
        msg: "This playbook requires a recent Ubuntu/Debian with kernel support for WireGuard"

    - name: Check IP forwarding is enabled
      ansible.builtin.command: cat /proc/sys/net/ipv4/ip_forward
      register: ip_forward_status
      changed_when: false

    - name: Verify IP forwarding is enabled
      ansible.builtin.assert:
        that: ip_forward_status.stdout == "1"
        msg: "IP forwarding is not enabled. Enable it with 'sysctl -w net.ipv4.ip_forward=1' and update /etc/sysctl.conf."

    - name: Check network connectivity
      ansible.builtin.command: ping -c 1 8.8.8.8
      register: internet_ping
      changed_when: false
      ignore_errors: true

    - name: Verify outbound internet connectivity
      ansible.builtin.assert:
        that: internet_ping is succeeded
        msg: "No outbound internet connectivity detected. Ensure the node can reach the internet."

    - name: Create local directory for WireGuard keys
      ansible.builtin.file:
        path: "{{ local_keys_dir }}"
        state: directory
        mode: "0755"
      delegate_to: localhost
      become: false

    - name: Check if VPS public key file exists
      ansible.builtin.stat:
        path: "{{ server_public_key_file }}"
      register: vps_public_key_stat
      delegate_to: localhost
      become: false

    - name: Set VPS public key fact
      ansible.builtin.set_fact:
        wireguard_vps_public_key: "{{ lookup('file', server_public_key_file) }}"
      when: vps_public_key_stat.stat.exists
      delegate_to: localhost
      become: false

    - name: Set default VPS public key when file doesn't exist
      ansible.builtin.set_fact:
        wireguard_vps_public_key: "VPS_PUBLIC_KEY_HERE"
        setup_type: "initial"
      when: not vps_public_key_stat.stat.exists
      delegate_to: localhost
      become: false

    - name: Install WireGuard packages
      ansible.builtin.apt:
        name:
          - wireguard
          - wireguard-tools
        state: present
        update_cache: yes

    - name: Ensure WireGuard directory exists
      ansible.builtin.file:
        path: "{{ wireguard_conf_dir }}"
        state: directory
        mode: "0700"

    - name: Check if WireGuard private key exists
      ansible.builtin.stat:
        path: "{{ wireguard_conf_dir }}/home_private.key"
      register: home_private_key_stat

    - name: Generate Home Node-A private key if not present
      ansible.builtin.command: wg genkey
      register: home_private_key_cmd
      when: not home_private_key_stat.stat.exists

    - name: Save Home Node-A private key if generated
      ansible.builtin.copy:
        content: "{{ home_private_key_cmd.stdout }}"
        dest: "{{ wireguard_conf_dir }}/home_private.key"
        mode: "0600"
      when: not home_private_key_stat.stat.exists

    - name: Read Home Node-A private key
      ansible.builtin.slurp:
        src: "{{ wireguard_conf_dir }}/home_private.key"
      register: home_private_key_file

    - name: Set Home Node-A private key fact
      ansible.builtin.set_fact:
        home_private_key: "{{ home_private_key_file.content | b64decode | trim }}"

    - name: Generate Home Node-A public key
      ansible.builtin.shell: echo "{{ home_private_key }}" | wg pubkey
      register: home_public_key
      changed_when: false

    - name: Save Home Node-A public key
      ansible.builtin.copy:
        content: "{{ home_public_key.stdout }}"
        dest: "{{ wireguard_conf_dir }}/home_public.key"
        mode: "0644"

    - name: Save Home Node-A public key locally for easy transfer to VPS
      ansible.builtin.copy:
        content: "{{ home_public_key.stdout }}"
        dest: "{{ local_keys_dir }}/home_public.key"
        mode: "0644"
      delegate_to: localhost
      become: false

    - name: Generate VPS config snippet for easy setup
      ansible.builtin.copy:
        content: |
          # Add to /etc/wireguard/wg0.conf on your VPS

          # Home Cluster (Node-A)
          [Peer]
          PublicKey = {{ home_public_key.stdout }}
          AllowedIPs = {{ wireguard_home_ip }}/32, {{ wireguard_network_cidr }}
        dest: "{{ local_keys_dir }}/vps_peer_config.txt"
        mode: "0644"
      delegate_to: localhost
      become: false

    - name: Create WireGuard client config template
      ansible.builtin.copy:
        dest: "{{ wireguard_conf_dir }}/{{ wireguard_interface }}.conf"
        mode: "0600"
        force: yes
        content: |
          [Interface]
          Address = {{ wireguard_home_ip }}/{{ wireguard_home_subnet }}
          PrivateKey = {{ home_private_key }}

          [Peer]
          PublicKey = {{ wireguard_vps_public_key }}
          Endpoint = {{ wireguard_vps_public_ip }}:{{ wireguard_vps_port }}
          AllowedIPs = {{ wireguard_allowed_ips }}
          PersistentKeepalive = {{ wireguard_keepalive_seconds }}

    - name: Enable IP forwarding
      ansible.builtin.sysctl:
        name: net.ipv4.ip_forward
        value: "1"
        sysctl_set: yes
        state: present
        reload: yes

    - name: Check if UFW is active
      ansible.builtin.command: ufw status
      register: ufw_status
      changed_when: false
      ignore_errors: true

    - name: Configure UFW for WireGuard and Calico (if active)
      ansible.builtin.command: "{{ item }}"
      with_items:
        - ufw allow from {{ wireguard_vps_ip }}
        - ufw route allow in on {{ wireguard_interface }} out on eno1
        - ufw route allow in on eno1 out on {{ wireguard_interface }}
      when: ufw_status.stdout is defined and "active" in ufw_status.stdout
      ignore_errors: true

    # First just enable the service without starting it
    - name: Enable WireGuard service for automatic startup
      ansible.builtin.systemd:
        name: "wg-quick@{{ wireguard_interface }}"
        enabled: yes
      when: wireguard_vps_public_key != "VPS_PUBLIC_KEY_HERE"

    # Manually bring up the interface which is more reliable for first-time setup
    - name: Stop WireGuard interface if running
      ansible.builtin.command: wg-quick down {{ wireguard_interface }}
      ignore_errors: true
      changed_when: false
      when: wireguard_vps_public_key != "VPS_PUBLIC_KEY_HERE"

    - name: Start WireGuard interface
      ansible.builtin.command: wg-quick up {{ wireguard_interface }}
      register: wg_start_result
      ignore_errors: true
      changed_when: wg_start_result.rc == 0
      when: wireguard_vps_public_key != "VPS_PUBLIC_KEY_HERE"

    - name: Display WireGuard start result
      ansible.builtin.debug:
        msg: "WireGuard start result: {{ wg_start_result.stdout | default('No output') }}"
      when: wireguard_vps_public_key != "VPS_PUBLIC_KEY_HERE" and wg_start_result is defined

    - name: Display WireGuard start error
      ansible.builtin.debug:
        msg: "WireGuard start error: {{ wg_start_result.stderr | default('No error') }}"
      when: wireguard_vps_public_key != "VPS_PUBLIC_KEY_HERE" and wg_start_result is defined and wg_start_result.rc != 0

    - name: Display initial setup header
      ansible.builtin.debug:
        msg: "INITIAL SETUP MODE (No VPS public key provided)"
      when: setup_type is defined and setup_type == "initial"

    - name: Display initial setup status
      ansible.builtin.debug:
        msg: "1. Home cluster keys have been generated"
      when: setup_type is defined and setup_type == "initial"

    - name: Display initial setup status 2
      ansible.builtin.debug:
        msg: "2. WireGuard interface is NOT STARTED until you complete VPS setup"
      when: setup_type is defined and setup_type == "initial"

    - name: Display initial setup next steps header
      ansible.builtin.debug:
        msg: "Next steps:"
      when: setup_type is defined and setup_type == "initial"

    - name: Display initial setup next step 1
      ansible.builtin.debug:
        msg: "1. Set up WireGuard on your VPS (see plan.md section 2)"
      when: setup_type is defined and setup_type == "initial"

    - name: Display initial setup next step 2
      ansible.builtin.debug:
        msg: "2. Get the VPS public key and save it to: {{ server_public_key_file }}"
      when: setup_type is defined and setup_type == "initial"

    - name: Display initial setup next step 3
      ansible.builtin.debug:
        msg: "3. Re-run this playbook to establish the connection"
      when: setup_type is defined and setup_type == "initial"

    - name: Wait for interface to come up
      ansible.builtin.wait_for:
        timeout: 5
      delegate_to: localhost
      become: false
      when: wireguard_vps_public_key != "VPS_PUBLIC_KEY_HERE"

    - name: Test connection to VPS WireGuard IP
      ansible.builtin.command: ping -c 3 -W 5 {{ wireguard_vps_ip }}
      register: ping_vps
      ignore_errors: true
      changed_when: false
      when: wireguard_vps_public_key != "VPS_PUBLIC_KEY_HERE"

    - name: Display key files section header
      ansible.builtin.debug:
        msg: "WireGuard keys have been saved to the following locations:"
      when: wireguard_vps_public_key == "VPS_PUBLIC_KEY_HERE"

    - name: Display home public key location
      ansible.builtin.debug:
        msg: "Home public key (for VPS config): {{ local_keys_dir }}/home_public.key"
      when: wireguard_vps_public_key == "VPS_PUBLIC_KEY_HERE"

    - name: Display VPS config snippet location
      ansible.builtin.debug:
        msg: "VPS config snippet: {{ local_keys_dir }}/vps_peer_config.txt"
      when: wireguard_vps_public_key == "VPS_PUBLIC_KEY_HERE"

    - name: Display easy setup instructions
      ansible.builtin.debug:
        msg: "For easy setup, copy the contents of vps_peer_config.txt to your VPS:"
      when: wireguard_vps_public_key == "VPS_PUBLIC_KEY_HERE"

    - name: Display cat command for config
      ansible.builtin.debug:
        msg: "cat {{ local_keys_dir }}/vps_peer_config.txt >> /etc/wireguard/wg0.conf (on your VPS)"
      when: wireguard_vps_public_key == "VPS_PUBLIC_KEY_HERE"

    - name: Display restart instruction
      ansible.builtin.debug:
        msg: "Then restart WireGuard on the VPS:"
      when: wireguard_vps_public_key == "VPS_PUBLIC_KEY_HERE"

    - name: Display restart command
      ansible.builtin.debug:
        msg: "sudo systemctl restart wg-quick@wg0"
      when: wireguard_vps_public_key == "VPS_PUBLIC_KEY_HERE"

    - name: Display VPS setup instructions header
      ansible.builtin.debug:
        msg: "VPS SETUP INSTRUCTIONS:"
      when: wireguard_vps_public_key == "VPS_PUBLIC_KEY_HERE"

    - name: Display step 1 for VPS setup
      ansible.builtin.debug:
        msg: "1. On your VPS, create /etc/wireguard/wg0.conf with:"
      when: wireguard_vps_public_key == "VPS_PUBLIC_KEY_HERE"

    - name: Display interface config for VPS
      ansible.builtin.debug:
        msg: "   [Interface]"
      when: wireguard_vps_public_key == "VPS_PUBLIC_KEY_HERE"

    - name: Display address config for VPS
      ansible.builtin.debug:
        msg: "   Address = 10.8.0.1/24"
      when: wireguard_vps_public_key == "VPS_PUBLIC_KEY_HERE"

    - name: Display port config for VPS
      ansible.builtin.debug:
        msg: "   ListenPort = 51820"
      when: wireguard_vps_public_key == "VPS_PUBLIC_KEY_HERE"

    - name: Display private key config for VPS
      ansible.builtin.debug:
        msg: "   PrivateKey = <VPS_PRIVATE_KEY>"
      when: wireguard_vps_public_key == "VPS_PUBLIC_KEY_HERE"

    - name: Display PostUp config for VPS
      ansible.builtin.debug:
        msg: "   PostUp   = iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE"
      when: wireguard_vps_public_key == "VPS_PUBLIC_KEY_HERE"

    - name: Display PostDown config for VPS
      ansible.builtin.debug:
        msg: "   PostDown = iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE"
      when: wireguard_vps_public_key == "VPS_PUBLIC_KEY_HERE"

    - name: Display step 2 for VPS setup
      ansible.builtin.debug:
        msg: "2. Get the VPS public key with:"
      when: wireguard_vps_public_key == "VPS_PUBLIC_KEY_HERE"

    - name: Display command to get VPS public key
      ansible.builtin.debug:
        msg: "   sudo cat /etc/wireguard/wg0.pub"
      when: wireguard_vps_public_key == "VPS_PUBLIC_KEY_HERE"

    - name: Display step 3 for VPS setup
      ansible.builtin.debug:
        msg: "3. Save that key to: {{ server_public_key_file }}"
      when: wireguard_vps_public_key == "VPS_PUBLIC_KEY_HERE"

    - name: Display step 4 for VPS setup
      ansible.builtin.debug:
        msg: "4. Re-run this playbook to complete the setup"
      when: wireguard_vps_public_key == "VPS_PUBLIC_KEY_HERE"

    - name: Show WireGuard status
      ansible.builtin.command: wg show
      register: wg_status
      changed_when: false
      ignore_errors: true
      when: wireguard_vps_public_key != "VPS_PUBLIC_KEY_HERE"

    - name: Display WireGuard status
      ansible.builtin.debug:
        msg: "{{ wg_status.stdout | default('WireGuard not running - waiting for VPS key') }}"
      when: wireguard_vps_public_key != "VPS_PUBLIC_KEY_HERE"

    - name: Display connectivity test result
      ansible.builtin.debug:
        msg: "VPS connectivity test: {{ 'SUCCESSFUL' if ping_vps.rc|default(1) == 0 else 'FAILED - VPS may not be configured yet' }}"
      when: wireguard_vps_public_key != "VPS_PUBLIC_KEY_HERE"

    - name: Display verification instructions header
      ansible.builtin.debug:
        msg: "Once VPS is configured with the peer information above, verify tunnel:"
      when: wireguard_vps_public_key != "VPS_PUBLIC_KEY_HERE"

    - name: Display verification step 1
      ansible.builtin.debug:
        msg: "1. On Node-A: ping {{ wireguard_vps_ip }}"
      when: wireguard_vps_public_key != "VPS_PUBLIC_KEY_HERE"

    - name: Display verification step 2
      ansible.builtin.debug:
        msg: "2. On VPS: ping {{ wireguard_home_ip }}"
      when: wireguard_vps_public_key != "VPS_PUBLIC_KEY_HERE"

    - name: Display verification step 3
      ansible.builtin.debug:
        msg: "3. On Mobile (with WireGuard connected): ping 192.168.50.x (any cluster IP)"
      when: wireguard_vps_public_key != "VPS_PUBLIC_KEY_HERE"

    - name: Display troubleshooting header
      ansible.builtin.debug:
        msg: "Troubleshooting:"
      when: wireguard_vps_public_key != "VPS_PUBLIC_KEY_HERE"

    - name: Display troubleshooting tip 1
      ansible.builtin.debug:
        msg: "- Check VPS firewall/NSG allows UDP port {{ wireguard_vps_port }}"
      when: wireguard_vps_public_key != "VPS_PUBLIC_KEY_HERE"

    - name: Display troubleshooting tip 2
      ansible.builtin.debug:
        msg: "- Ensure public IPs are correct"
      when: wireguard_vps_public_key != "VPS_PUBLIC_KEY_HERE"

    - name: Display troubleshooting tip 3
      ansible.builtin.debug:
        msg: "- Verify the tunnel with: sudo wg show"
      when: wireguard_vps_public_key != "VPS_PUBLIC_KEY_HERE"

  handlers:
    - name: restart wireguard
      ansible.builtin.systemd:
        name: "wg-quick@{{ wireguard_interface }}"
        state: restarted
