# playbooks/sync-certificates.yml
---
- name: Sync TLS Certificates Across Namespaces
  hosts: kube_control_plane[0]
  become: true
  vars:
    kubeconfig_path: /etc/kubernetes/admin.conf
    # List target namespaces here for easy management
    target_namespaces:
      - argocd
      - longhorn-system
      - pihole
      - monitoring
  tasks:
    - name: Extract TLS certificate data
      shell: kubectl get secret prod-cert-tls -n cert-manager -o jsonpath='{.data.tls\.crt}'
      register: tls_crt
      tags: tls

    - name: Extract TLS key data
      shell: kubectl get secret prod-cert-tls -n cert-manager -o jsonpath='{.data.tls\.key}'
      register: tls_key
      tags: tls

    - name: Ensure target namespaces exist
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ item }}"
      loop: "{{ target_namespaces }}"
      tags: tls

    - name: Sync TLS certificate to target namespaces
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: prod-cert-tls
            namespace: "{{ item }}"
            annotations:
              cert-manager.io/certificate-name: prod-cert
              cert-manager.io/issuer-kind: ClusterIssuer
              cert-manager.io/issuer-name: letsencrypt-prod
          type: kubernetes.io/tls
          data:
            tls.crt: "{{ tls_crt.stdout }}"
            tls.key: "{{ tls_key.stdout }}"
      loop: "{{ target_namespaces }}"
      tags: tls

    - name: Verify certificate presence in target namespaces
      shell: |
        kubectl get secret prod-cert-tls -n {{ item }} -o json | jq -r '.metadata.namespace + ": " + (.data."tls.crt" | length | tostring) + " bytes"'
      register: cert_verification
      loop: "{{ target_namespaces }}"
      tags: verify

    - name: Display verification results
      debug:
        msg: "{{ cert_verification.results | map(attribute='stdout') | list }}"
      tags: verify
