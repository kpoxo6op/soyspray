# playbooks/manage-argocd-apps.yml
---
- name: Apply Argo CD Applications - Deploy Application Manifests
  hosts: kube_control_plane[0]
  become: true
  vars:
    kubeconfig_path: /etc/kubernetes/admin.conf
  tasks:
    - name: Apply Pihole
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
        namespace: argocd
        definition: "{{ lookup('file', playbook_dir + '/yaml/argocd-apps/pihole/pihole-application.yaml') }}"
      tags: pihole

    - name: Apply Pihole Exporter
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
        namespace: argocd
        definition: "{{ lookup('file', playbook_dir + '/yaml/argocd-apps/pihole-exporter/pihole-exporter-application.yaml') }}"
      tags: pihole

    - name: Verify and load Telegram token from .env
      block:
        - name: Load TELEGRAM_BOT_TOKEN from .env
          set_fact:
            telegram_bot_token: >-
              {{
                lookup('file', playbook_dir + '/../.env')
                | regex_findall('TELEGRAM_BOT_TOKEN=([^\n]+)') | first
                | default([]) | first | default('') | trim
              }}

        - name: Debug token length
          debug:
            msg: >-
              Token length: {{ telegram_bot_token | length }}
              First chars: {{ telegram_bot_token | truncate(5, True, '') }}

        - name: Validate TELEGRAM_BOT_TOKEN
          fail:
            msg: "TELEGRAM_BOT_TOKEN is empty/missing in .env file"
          when: telegram_bot_token | length == 0
      rescue:
        - name: Fail with helpful message
          fail:
            msg: "Error: .env file not found or TELEGRAM_BOT_TOKEN invalid"
      tags: prometheus

    - name: Create monitoring namespace
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: monitoring
      tags: prometheus

    - name: Create Kubernetes Secret for Alertmanager Telegram Integration
      kubernetes.core.k8s:
        state: present
        namespace: monitoring
        resource_definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: alertmanager-telegram-secret
            namespace: monitoring
          data:
            TELEGRAM_BOT_TOKEN: "{{ telegram_bot_token | b64encode }}"
      tags: prometheus

    - name: Apply Prometheus CRDs
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
        namespace: argocd
        definition: "{{ lookup('file', playbook_dir + '/yaml/argocd-apps/prometheus/prometheus-crds-application.yaml') }}"
      tags: prometheus

    - name: Apply Prometheus
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
        namespace: argocd
        definition: "{{ lookup('file', playbook_dir + '/yaml/argocd-apps/prometheus/prometheus-application.yaml') }}"
      tags: prometheus

    - name: Apply Longhorn
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
        namespace: argocd
        definition: "{{ lookup('file', playbook_dir + '/yaml/argocd-apps/longhorn/longhorn-application.yaml') }}"
      tags: longhorn

    # Verify and load Cloudflare token for cert-manager
    - name: Verify and load Cloudflare token from .env for cert-manager
      block:
        - name: Load CLOUDFLARE_API_TOKEN from .env
          set_fact:
            cloudflare_api_token: >-
              {{
                lookup('file', playbook_dir + '/../.env')
                | regex_findall('CLOUDFLARE_API_TOKEN=([^\n]+)') | first
                | default('') | trim
              }}

        - name: Debug token length
          debug:
            msg: >-
              Token length: {{ cloudflare_api_token | length }}
              First chars: {{ cloudflare_api_token | truncate(5, True, '') }}

        - name: Validate CLOUDFLARE_API_TOKEN
          fail:
            msg: "CLOUDFLARE_API_TOKEN is empty/missing in .env file"
          when: cloudflare_api_token | length == 0
      rescue:
        - name: Fail with helpful message
          fail:
            msg: "Error: .env file not found or CLOUDFLARE_API_TOKEN invalid"
      tags: cert-manager

    - name: Create Cloudflare API Token Secret
      kubernetes.core.k8s:
        state: present
        namespace: cert-manager
        resource_definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: cloudflare-api-token
            namespace: cert-manager
          data:
            api-token: "{{ cloudflare_api_token | b64encode }}"
      tags: cert-manager

    # Copy TLS certificate to ArgoCD namespace for ingress
    - name: Extract TLS certificate data
      shell: kubectl get secret prod-cert-tls -n cert-manager -o jsonpath='{.data.tls\.crt}'
      register: tls_crt
      tags: argocd-ingress

    - name: Extract TLS key data
      shell: kubectl get secret prod-cert-tls -n cert-manager -o jsonpath='{.data.tls\.key}'
      register: tls_key
      tags: argocd-ingress

    - name: Copy TLS certificate to ArgoCD namespace
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
        resource_definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: prod-cert-tls
            namespace: argocd
            annotations:
              cert-manager.io/certificate-name: prod-cert
              cert-manager.io/issuer-kind: ClusterIssuer
              cert-manager.io/issuer-name: letsencrypt-prod
          type: kubernetes.io/tls
          data:
            tls.crt: "{{ tls_crt.stdout }}"
            tls.key: "{{ tls_key.stdout }}"
      tags: argocd-ingress

    - name: Apply Cert Manager Configuration
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
        namespace: argocd
        definition: "{{ lookup('file', playbook_dir + '/yaml/argocd-apps/cert-manager/cert-manager-application.yaml') }}"
      tags: cert-manager

    # Create namespace for external-dns
    - name: Create external-dns namespace
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: external-dns
      tags: external-dns

    # Verify and load Cloudflare token for external-dns
    - name: Verify and load Cloudflare token from .env for external-dns
      block:
        - name: Load CLOUDFLARE_API_TOKEN from .env
          set_fact:
            cloudflare_api_token: >-
              {{
                lookup('file', playbook_dir + '/../.env')
                | regex_findall('CLOUDFLARE_API_TOKEN=([^\n]+)') | first
                | default('') | trim
              }}

        - name: Debug token length
          debug:
            msg: >-
              Token length: {{ cloudflare_api_token | length }}
              First chars: {{ cloudflare_api_token | truncate(5, True, '') }}

        - name: Validate CLOUDFLARE_API_TOKEN
          fail:
            msg: "CLOUDFLARE_API_TOKEN is empty/missing in .env file"
          when: cloudflare_api_token | length == 0
      rescue:
        - name: Fail with helpful message
          fail:
            msg: "Error: .env file not found or CLOUDFLARE_API_TOKEN invalid"
      tags: external-dns

    # Create secret for external-dns using the same Cloudflare token
    - name: Create External DNS Cloudflare API Token Secret
      kubernetes.core.k8s:
        state: present
        namespace: external-dns
        resource_definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: cloudflare-api-token
            namespace: external-dns
          data:
            api-token: "{{ cloudflare_api_token | b64encode }}"
      tags: external-dns

    - name: Apply External DNS Configuration
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
        namespace: argocd
        definition: "{{ lookup('file', playbook_dir + '/yaml/argocd-apps/external-dns/external-dns-application.yaml') }}"
      tags: external-dns
