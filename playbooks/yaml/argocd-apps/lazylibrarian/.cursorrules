# LazyLibrarian Cursor Rules

## Context
LazyLibrarian configuration for GitOps Kubernetes setup using ArgoCD. Part of media stack with Prowlarr and qBittorrent integration.

## API Configuration
- **URL**: https://lazylibrarian.soyspray.vip
- **API Key**: 3723d36aa1e9e9955e3bf8982e94ee3c

## Core API Commands
- `findBook` - Search for books by name
- `addBook` - Add book to database
- `queueBook` - Mark book as "Wanted" (changes from "Skipped")
- `searchBook` - Trigger download search via Prowlarr
- `getSnatched` - Get downloaded books with download URLs
- `getWanted` - Get wanted books list

## LazyLibrarian → Prowlarr → qBittorrent Workflow
1. Find/add book: `findBook` → `addBook`
2. Queue book: `queueBook` (Skipped → Wanted)
3. Search downloads: `searchBook` (triggers Prowlarr)
4. Get URLs: `getSnatched` (returns `NZBurl` field)

## OPDS Configuration
- Enable via API: `writeCFG` with `opds_enable=1`
- Set credentials: `opds_username`, `opds_password`
- Validate: Check `/opds` endpoint
- **Issue**: Configuration may not persist after restart

## File Processing Pipeline
1. qBittorrent → `/downloads` (Longhorn RWX)
2. LazyLibrarian → `/incoming` (same PVC)
3. Processed → `/library` (separate PVC)
4. OPDS serves from `/library`

## Kubernetes Context
- **Namespace**: media
- **Deployment**: lazylibrarian
- **Service**: ClusterIP
- **Ingress**: Nginx with SSL
- **Storage**: Longhorn PVCs

## Essential Troubleshooting
```bash
# Check pod status
kubectl get pods -n media -l app=lazylibrarian

# View logs
kubectl logs -n media deployment/lazylibrarian

# Port forward for direct access
kubectl port-forward -n media svc/lazylibrarian 5299:5299

# Restart deployment
kubectl rollout restart deployment/lazylibrarian -n media
```

## Common Issues
- **"Invalid id"**: Use `addBook` first
- **"Skipped" status**: Use `queueBook` to change to "Wanted"
- **OPDS not working**: May require manual web interface configuration
