# playbooks/yaml/argocd-apps/qbittorrent/bootstrap-job.yaml
# Enhanced bootstrap with retry logic and verification
# Wait for login to succeed, then create categories with resilient error handling
apiVersion: batch/v1
kind: Job
metadata:
  name: qbittorrent-bootstrap
  namespace: media
  labels:
    app: qbittorrent-bootstrap
    component: bootstrap
  annotations:
    argocd.argoproj.io/hook: PostSync
spec:
  ttlSecondsAfterFinished: 3600
  template:
    metadata:
      labels:
        app: qbittorrent-bootstrap
        component: bootstrap
    spec:
      restartPolicy: OnFailure
      containers:
      - name: bootstrap
        image: curlimages/curl:8.8.0
        env:
        - name: BASE_URL
          value: "http://qbittorrent.media.svc.cluster.local:8080"
        - name: QB_LOGIN
          value: "admin:123"
        command:
        - sh
        - -c
        - |
          login() {
            echo "Logging in to qBittorrent..."
            curl -fsSL -c /tmp/cookie \
              -d "username=${QB_LOGIN%%:*}&password=${QB_LOGIN#*:}" \
              "${BASE_URL}/api/v2/auth/login"
          }

          create_category() {
            local category="$1"
            local max_attempts=3
            local attempt=1

            while [ $attempt -le $max_attempts ]; do
              echo "Creating category: $category (attempt $attempt/$max_attempts)"

              if curl -sSL -b /tmp/cookie \
                -d "category=$category" \
                "${BASE_URL}/api/v2/torrents/createCategory" 2>/dev/null; then
                echo "Category $category: Success"
                return 0
              else
                echo "Category $category: Failed on attempt $attempt"
                if [ $attempt -lt $max_attempts ]; then
                  echo "Retrying in 2 seconds..."
                  sleep 2
                fi
              fi
              attempt=$((attempt + 1))
            done

            echo "Category $category: All attempts failed"
            return 1
          }

          verify_categories() {
            echo "Verifying categories were created..."
            if curl -sSL -b /tmp/cookie "${BASE_URL}/api/v2/torrents/categories" > /tmp/categories.json 2>/dev/null; then
              echo "Current categories:"
              cat /tmp/categories.json | tr ',' '\n' | grep -oE '"[^"]+":' | tr -d '":' | sort
              return 0
            else
              echo "Failed to retrieve categories for verification"
              return 1
            fi
          }

          echo "Waiting for login to succeed..."
          until login; do
            echo "Login failed, retrying in 5s..."
            sleep 5
          done
          echo "Login successful"

          echo "Waiting for API to be ready..."
          until curl -fsSL -b /tmp/cookie -f "${BASE_URL}/api/v2/app/webapiVersion" > /dev/null 2>&1; do
            echo "API not ready, retrying in 5s..."
            sleep 5
          done
          echo "API ready"

          echo "Creating categories with retry logic..."

          # Create each category with retry logic and delay between attempts
          for category in tv movies books audiobooks scenes; do
            create_category "$category"
            sleep 1  # Small delay between category creations
          done

          # Verify all categories were created
          verify_categories

          echo "qBittorrent categories configured successfully"
        resources:
          requests:
            memory: "32Mi"
            cpu: "50m"
          limits:
            memory: "64Mi"
            cpu: "100m"
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 65534
          capabilities:
            drop:
            - ALL
