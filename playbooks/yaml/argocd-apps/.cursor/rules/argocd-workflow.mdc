---
description: GitOps workflow documentation for ArgoCD applications and deployment processes
globs:
alwaysApply: false
---

# ArgoCD GitOps Workflow

## Overview
This project follows GitOps principles with ArgoCD managing all cluster applications. All changes are version-controlled and automatically deployed to the Kubernetes cluster.

## GitOps Principles
- **Declarative Configuration**: All cluster state defined in Git
- **Version Control**: Every change is tracked and reversible
- **Automated Deployment**: ArgoCD syncs Git changes to cluster
- **No Manual Changes**: All modifications go through Git workflow

## ArgoCD Applications
All cluster apps are defined in ArgoCD and applied via [deploy-argocd-apps.yml](mdc:playbooks/deploy-argocd-apps.yml):

### Media Stack Applications
- **dingu** - Telegram bot for book downloads ([dingu-application.yaml](mdc:playbooks/yaml/argocd-apps/dingu/dingu-application.yaml))
- **prowlarr** - Indexer management ([prowlarr-application.yaml](mdc:playbooks/yaml/argocd-apps/prowlarr/prowlarr-application.yaml))
- **qbittorrent** - Torrent client ([qbittorrent-application.yaml](mdc:playbooks/yaml/argocd-apps/qbittorrent/qbittorrent-application.yaml))
- **immich** - Photo management ([immich-application.yaml](mdc:playbooks/yaml/argocd-apps/immich/immich-application.yaml))

### Infrastructure Applications
- **cert-manager** - SSL certificate management ([cert-manager-application.yaml](mdc:playbooks/yaml/argocd-apps/cert-manager/cert-manager-application.yaml))
- **external-dns** - DNS management ([external-dns-application.yaml](mdc:playbooks/yaml/argocd-apps/external-dns/external-dns-application.yaml))
- **longhorn** - Persistent storage ([longhorn-application.yaml](mdc:playbooks/yaml/argocd-apps/longhorn/longhorn-application.yaml))
- **prometheus** - Monitoring ([prometheus-application.yaml](mdc:playbooks/yaml/argocd-apps/prometheus/prometheus-application.yaml))
- **pihole** - DNS filtering ([pihole-application.yaml](mdc:playbooks/yaml/argocd-apps/pihole/pihole-application.yaml))

## Deployment Workflow
1. **Code Changes**: Make changes to application configurations
2. **Git Commit**: Commit changes with descriptive messages
3. **ArgoCD Sync**: ArgoCD automatically detects and applies changes
4. **Verification**: Check application status in ArgoCD UI

## Common Commands
```bash
# Deploy all ArgoCD applications
ansible-playbook playbooks/deploy-argocd-apps.yml

# Manual ArgoCD sync (if needed)
argocd app sync <application-name>

# Check application status
argocd app get <application-name>

# Restart deployment (for code changes)
kubectl rollout restart deployment/<deployment-name> -n <namespace>
```

## Application Structure
Each ArgoCD application follows this pattern:
```
app-name/
├── app-name-application.yaml    # ArgoCD Application definition
├── deployment.yaml              # Kubernetes deployment
├── service.yaml                 # Kubernetes service (if needed)
├── ingress.yaml                 # Ingress configuration (if needed)
├── kustomization.yaml           # Kustomize configuration
└── configmap.yaml               # Configuration (if needed)
```

## Best Practices
- **Atomic Changes**: Each commit should represent a complete, working change
- **Descriptive Messages**: Use clear commit messages explaining what changed
- **Test Before Merge**: Validate changes in development environment
- **Monitor Deployments**: Watch ArgoCD for successful sync and application health
- **Rollback Ready**: Keep previous versions available for quick rollback

## Troubleshooting
- **Sync Issues**: Check ArgoCD logs and application events
- **Application Health**: Verify pod status and resource availability
- **Configuration Errors**: Validate YAML syntax and Kubernetes resources
- **Network Issues**: Check ingress, services, and DNS resolution

## Integration with Kubespray
- Kubespray manages the underlying Kubernetes cluster
- ArgoCD is deployed as part of the cluster addons
- Custom playbooks in [playbooks/](mdc:playbooks/) extend Kubespray functionality
- Cluster upgrades use [kubespray/upgrade-cluster.yml](mdc:kubespray/upgrade-cluster.yml)
