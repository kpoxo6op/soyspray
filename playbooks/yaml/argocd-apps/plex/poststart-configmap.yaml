# playbooks/yaml/argocd-apps/plex/poststart-configmap.yaml
# Minimal postStart script that waits for Plex, claims the server using PLEX_ACCOUNT_TOKEN,
# and never fails the pod if claim is unavailable.

apiVersion: v1
kind: ConfigMap
metadata:
  name: plex-poststart
  namespace: media
  labels:
    app: plex
  annotations:
    argocd.argoproj.io/sync-wave: "0"
data:
  poststart.sh: |-
    echo "[postStart] Starting Plex auto-claim..."
    timeout=300
    waited=0
    until curl -fsS http://127.0.0.1:32400/identity >/dev/null 2>&1; do
      if [ "$waited" -ge "$timeout" ]; then
        echo "[postStart] Timeout waiting for Plex; skipping claim"
        exit 0
      fi
      echo "[postStart] Waiting for Plex... (${waited}s/${timeout}s)"
      sleep 5
      waited=$((waited+5))
    done
    IDENTITY=$(curl -fsS http://127.0.0.1:32400/identity || true)
    if echo "$IDENTITY" | grep -q 'claimed="1"'; then
      echo "[postStart] Server already claimed"
      exit 0
    fi
    if [ -z "${PLEX_ACCOUNT_TOKEN:-}" ]; then
      echo "[postStart] PLEX_ACCOUNT_TOKEN not set; skipping auto-claim"
      exit 0
    fi
    CLAIM=$(curl -fsS "https://plex.tv/api/claim/token?X-Plex-Token=${PLEX_ACCOUNT_TOKEN}" 2>/dev/null | grep -o 'token="[^"]*"' | cut -d'"' -f2 || true)
    if [ -z "$CLAIM" ]; then
      echo "[postStart] Failed to obtain claim token; skipping"
      exit 0
    fi
    curl -fsS -X POST "http://127.0.0.1:32400/myplex/claim?token=${CLAIM}" >/dev/null 2>&1 || true
    for i in $(seq 1 15); do
      sleep 2
      IDENTITY=$(curl -fsS http://127.0.0.1:32400/identity || true)
      if echo "$IDENTITY" | grep -q 'claimed="1"'; then
        echo "[postStart] Server claimed successfully"
        exit 0
      fi
    done
    echo "[postStart] Claim not confirmed; continuing"
    exit 0

