# Plex Authentication Rules

## Plex API Authentication

### ✅ CORRECT: Header-Based Authentication

When making Plex API calls from within the container, **always use header-based authentication**:

```bash
# Extract token from Preferences.xml
TOKEN=$(grep -o 'PlexOnlineToken="[^"]*"' "/config/Library Application Support/Plex Media Server/Preferences.xml" | cut -d'"' -f2)

# Set up headers array
H=(-H "X-Plex-Token: $TOKEN" -H "X-Plex-Product: YourAppName" -H "X-Plex-Client-Identifier: $(uuidgen)" -H "X-Plex-Version: 1.0")

# Make API calls
curl -fsS "${H[@]}" "http://127.0.0.1:32400/library/sections"
```

### ❌ WRONG: Query Parameter Authentication

**DO NOT** append tokens as query parameters - this causes 401 errors:

```bash
# WRONG - causes 401 Unauthorized
curl "http://127.0.0.1:32400/library/sections?X-Plex-Token=$TOKEN"

# WRONG - malformed URL
curl "http://127.0.0.1:32400/library/sections&X-Plex-Token=$TOKEN"
```

### Why Header Auth Works

1. **No URL encoding issues** - Headers handle special characters properly
2. **Consistent with Plex web client** - Matches how Plex's own UI authenticates
3. **Avoids parameter confusion** - No ambiguity between URL params and auth tokens

### Required Headers

Always include these headers with your API calls:

```bash
-H "X-Plex-Token: $TOKEN"                    # Authentication (required)
-H "X-Plex-Product: YourAppName"             # App identifier (recommended)
-H "X-Plex-Client-Identifier: $(uuidgen)"    # Unique client ID (recommended)
-H "X-Plex-Version: 1.0"                     # Version (recommended)
```

### Token Extraction

The Plex token is stored in Preferences.xml:

```bash
# Extract from Preferences.xml
TOKEN=$(grep -o 'PlexOnlineToken="[^"]*"' "/config/Library Application Support/Plex Media Server/Preferences.xml" | cut -d'"' -f2)

# Verify token exists
echo "Token length: ${#TOKEN}"
```

### Testing Authentication

Test your authentication setup:

```bash
# Should return server info (no 401)
curl -fsS "${H[@]}" http://127.0.0.1:32400/identity

# Should return library sections
curl -fsS "${H[@]}" http://127.0.0.1:32400/library/sections
```

### Common Pitfalls

1. **Missing quotes around file paths** - Preferences.xml path has spaces
2. **Token extraction failures** - Always check token length > 0
3. **Query parameter confusion** - Never mix `?` and `&` with tokens
4. **Header array syntax** - Use `"${H[@]}"` not `$H`

### Library Management

For library operations, use header authentication:

```bash
# Create library
curl -fsS -X POST "${H[@]}" \
  "http://127.0.0.1:32400/library/sections?name=TV%20Shows&type=show&agent=com.plexapp.agents.none&scanner=Plex%20Series%20Scanner&language=en&location=/data"

# Update library locations
curl -fsS -X PUT "${H[@]}" \
  "http://127.0.0.1:32400/library/sections/1?agent=com.plexapp.agents.none&location=/data"

# Trigger scan
curl -fsS "${H[@]}" \
  "http://127.0.0.1:32400/library/sections/1/refresh?path=/data"
```

### CLI Scanner Fallback

When API calls fail, use the Plex Media Scanner CLI:

```bash
# Create library (example: TV Shows)
/usr/lib/plexmediaserver/Plex Media Scanner --add-section "TV Shows" --type 2 --agent tv.plex.agents.series --location "/data" --lang en

# Create library (example: Movies)
/usr/lib/plexmediaserver/Plex Media Scanner --add-section "Movies" --type 1 --agent com.plexapp.agents.movie --location "/movies" --lang en

# List libraries
/usr/lib/plexmediaserver/Plex Media Scanner --list

# Scan specific library
/usr/lib/plexmediaserver/Plex Media Scanner --scan --section 1  # Deprecated but works
```

### Debug Commands

Use these for troubleshooting:

```bash
# Check token extraction
TOKEN=$(grep -o 'PlexOnlineToken="[^"]*"' "/config/Library Application Support/Plex Media Server/Preferences.xml" | cut -d'"' -f2)
echo "Token: ${TOKEN:0:10}... (length: ${#TOKEN})"

# Test basic connectivity
curl -s http://127.0.0.1:32400/identity  # Should work without auth

# Test authenticated calls
curl -fsS "${H[@]}" http://127.0.0.1:32400/identity  # Should work with auth
```
