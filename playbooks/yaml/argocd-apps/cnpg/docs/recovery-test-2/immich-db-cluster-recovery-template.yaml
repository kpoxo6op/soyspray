# playbooks/yaml/argocd-apps/cnpg/immich-db/immich-db-cluster.yaml
# Recovery configuration template for CNPG PITR from S3
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: immich-db
  namespace: postgresql
spec:
  instances: 1
  imageName: ghcr.io/tensorchord/cloudnative-pgvecto.rs:16-v0.3.0
  storage:
    size: 20Gi
    storageClass: longhorn
  bootstrap:
    recovery:
      source: immich-db-backup
      recoveryTarget:
        targetTime: "2025-10-24 20:53:45+00:00"  # Recovery drill target: Latest WAL 00000001000000000000000E
    # initdb:  # DISABLED during recovery - re-enable after successful restore
    #   database: immich
    #   owner: immich
    #   secret:
    #     name: immich-app-secret
    #   postInitApplicationSQL:
    #     - CREATE EXTENSION IF NOT EXISTS cube;
    #     - CREATE EXTENSION IF NOT EXISTS earthdistance;
    #     - CREATE EXTENSION IF NOT EXISTS "vectors";
    #     - ALTER DATABASE immich SET search_path TO "$user", public, vectors;
    #     - ALTER SCHEMA vectors OWNER TO immich;
    #     - GRANT SELECT ON TABLE pg_vector_index_stat TO immich;
  externalClusters:
    - name: immich-db-backup
      barmanObjectStore:
        destinationPath: s3://immich-offsite-archive-au2/immich/db/
        serverName: immich-db  # CRITICAL: Must match backup directory name in S3
        s3Credentials:
          accessKeyId:
            name: immich-offsite-restorer  # Use read-only restorer credentials
            key: AWS_ACCESS_KEY_ID
          secretAccessKey:
            name: immich-offsite-restorer
            key: AWS_SECRET_ACCESS_KEY
          region:
            name: immich-offsite-restorer
            key: AWS_REGION
  postgresql:
    shared_preload_libraries:
    - vectors
  monitoring:
    enablePodMonitor: true
  # backup:  # DISABLED during recovery to avoid WAL archive conflicts
  #   retentionPolicy: "60d"
  #   barmanObjectStore:
  #     destinationPath: s3://immich-offsite-archive-au2/immich/db/
  #     s3Credentials:
  #       accessKeyId:
  #         name: immich-offsite-writer
  #         key: AWS_ACCESS_KEY_ID
  #       secretAccessKey:
  #         name: immich-offsite-writer
  #         key: AWS_SECRET_ACCESS_KEY
  #       region:
  #         name: immich-offsite-writer
  #         key: AWS_REGION

